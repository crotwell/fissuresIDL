//File: IfEvent.idl
//
//********************************************************************
//	Date		By					   Description
//********************************************************************
// 2000-12 Mitchel Sanders Changes for version 1.0
//********************************************************************

#ifndef _IF_EVENT_IDL
#define _IF_EVENT_IDL

#include "Fissures.idl"
#include "IfNetwork.idl"
#include "IfPickMgr.idl"
#include "CosEventChannelAdmin.idl"
#include "IfParameterMgr.idl"

#pragma prefix "iris.edu"

//********************************************************************
//   Module IfEvent
//********************************************************************
module Fissures {

/**
 * The IFEvent module defines data structure and interfaces for access
 * and management of Event information.  Event may be any seismic event
 * occuring at some time and place.
 */
  module IfEvent {

    /** The version of this IDL. This value should change if and only if 
        the IDL itself changes. */ 
    const string VERSION = "1.0";

    typedef IfPickMgr::Pick Pick;
    typedef IfNetwork::SiteId SiteId;
    typedef IfParameterMgr::ParameterRef ParameterRef;

    interface EventFinder;
    interface EventFactory;
    interface EventAccess;
    typedef sequence<EventAccess> EventAccessSeq;
    interface Event;
    typedef sequence<Event> EventSeq;
    interface EventChannelFinder;


    //********************************************************************
    // Data Types
    //********************************************************************
    typedef string EventId;
    typedef string OriginId;
    typedef string PredictedArrivalId;
    typedef string VelocityModelId;
    typedef string PickId;
    typedef string Phase;

    /** Represents a seismic event catalog such as 
        FINGER, ISCCD, MHDF, NEICALRT, QED, WHDF. */
    typedef string Catalog;
    typedef sequence<Catalog> CatalogSeq;

    /** A contributor of seismic event catalogs. Examples include
        ISC, NEIC, HRVD. */
    typedef string Contributor;
    typedef sequence<Contributor> ContributorSeq;


    /**
     * Contains the attributes for a Fissures Event. 
     */
    valuetype EventAttr {

      /** The name of the event. There is no required format, however
          it should be intelligible to a human. For most events
          something like a stingified origin time and/or location
          is acceptible, larger events with well-known names in the
          literature may have more descriptive names such as Loma 
          Prieta or Northridge.Uniqueness is not required, but 
          is desirible. */ 
      public string name;

      /** The Flinn Engdahl region that this earthquake occurs in.
          Note that due to multiple Origins for a singe Event, there
          may be more than one region that could be said to contain
          the Event. Thus the region is informative, but should not
          be considered definative.*/ 
      public FlinnEngdahlRegion region;

      /** Ids for parameters that are associated with this event.*/
      public sequence<ParameterRef> parm_ids;
    };



    /**
     * Predicted Arrival holds the information generated by a travel time
     * calculator.
     */
    valuetype PredictedArrival {
      private PredictedArrivalId id;
      public string name;
      public TimeInterval travel_time;
      public Quantity ray_parameter;
      public Quantity dtdh;
      public VelocityModelId model_id;
      public sequence<ParameterRef> parm_ids;
    };
    typedef sequence<PredictedArrival> PredictedArrivalSeq;

    /**
     * Maintains the association between pick and the predicted arrival
     * generated from the events to generate an origin.
     */
    struct Locator {
      Pick  a_pick;
      PredictedArrival predicted_arrival;
    };
    typedef sequence<Locator> LocatorSeq;


    typedef string MagType;
    typedef sequence<MagType> MagTypeSeq;


    /**
     * Holds a Magnitude estimate for an origin
     */
    struct Magnitude {
      MagType type;
      float value;
      string contributor;
    };
    typedef sequence<Magnitude> MagnitudeSeq;

    /**
     * Contains information contributed to an estimate of the origin
     of an event.
     */
    valuetype Origin {
      /** An id for this origin. The format is unspecified, but it
          should be unique within a given service. */
      private OriginId id;

      /** The catalog to which this origin belongs, for example
          FINGER, ISCCD, MHDF */
      public string catalog;

      /** The contributor of this origin, such as NEIC, ISC. */
      public string contributor;

      /** The estimate of when the event happened. */
      public Time origin_time;

      /** The estimate of where the event happened. */
      public Location my_location;

      /** The magnitude estimates for this event, associated with this
          origin. */
      public MagnitudeSeq magnitudes;

      /** Parameters assiciated with this Origin. */
      public sequence<ParameterRef> parm_ids;

      /** @returns the id of this origin. The id is intended to be
          a read-only immutible attribute of an Origin.*/
      OriginId get_id();
    };
    typedef sequence<Origin> OriginSeq;

    // Event Notification Data Types

    // ***************************************************
    // *  PLEASE NOTE:                                   *
    // *  The words Event and Channel in the following   *
    // *  section are used for the standard OMG Event    *
    // *  service, which provides for notification that  *
    // *  something has happened. They are not related   *
    // *  to the seismological usage of Event or Channel.*
    // ***************************************************

    /** The human-understanable name given to an EventChannel. Should
        be unique within a service. */
    typedef string EventChannelName;

    /** Defines the types of items that will be sent via a specific
        EventChannel. This allows clients to decide whether a given 
        event channel delivers events that meet its needs. */
    struct EventChannelDefinition {

    /** The human-understanable name given to an EventChannel. Should
        be unique within a service. */
      EventChannelName name;

      /** The Area for which events are generated. */
      Area the_area;

      /** The minimum depth for events. */
      Length min_depth;

      /** The maximum depth for events. */
      Length max_depth;

      /** The list of magnitude types that events are required to 
          have. */
      MagType search_types;

      /** The minimum magnitude. */
      float min_magnitude;

      /** The maximum magnitude. */
      float max_magnitude;

      /** The possible catalogs that an event might have an origin
          belonging to. */  
      CatalogSeq catalogs;

      /** The possible contributors of origins to this channel. */
      ContributorSeq contributors;
    };
    typedef sequence<EventChannelDefinition> EventChannelDefinitionSeq;

    /** Structure sent in the Any via EventCannel to notify clients that 
	either a new event (earthquake) has occured, or that a new origin 
	has been added to an existing event. */
    struct EventNotify {
      EventAccess the_event;
      Origin new_origin;
      boolean new_event;
    };


    //********************************************************************
    // Exceptions
    //********************************************************************
    exception EventNotFound {
      EventId event;
    };

    exception OriginNotFound {
      OriginId origin;
    };

    exception NoPreferredOrigin {
    };

    exception DuplicatePick{};

    exception NotFound{};

    //********************************************************************
    // Iterators
    //********************************************************************

    interface EventSeqIter {

      long how_many_remain();

      boolean next_n(
		     in long how_many,
		     out EventAccessSeq seq);

      void destroy();
    };


    //********************************************************************
    // EventDC Interface
    //********************************************************************

    /**
     * The Event DataCenter Interface. This is the top level interface
     within IfEvent. It should be the only interface that should be
     registered with a Naming Service. All other interfaces should
     be located via methods in this interface.
     */
    interface EventDC {
      readonly attribute EventFinder a_finder;
      readonly attribute EventChannelFinder a_channel_finder;
    };

    //********************************************************************
    // EventMgr Interface
    //********************************************************************

    /**
     * The Event Manager Interface
     */
    interface EventMgr : EventDC {
      readonly attribute EventFactory a_factory;
    };

    //********************************************************************
    //Interface EventFinder
    //********************************************************************

    /**
     * The EventFinder interface provides operations to lookup events
     * in a store.
     */
    interface EventFinder : EventMgr
    {

      /** finds events that have on origin that matches the given arguments.
          Please note that if any of search_types, catalogs, or contributors
          are of length 0, then this will be interpreted by the server as
          <em>anything is acceptable.</em> In effect this provides a wildcard.
      */
      EventAccessSeq query_events(
				  in Area the_area,
				  in Length min_depth,
				  in Length max_depth,
				  in TimeRange time_range,
				  in MagTypeSeq search_types,
				  in float min_magnitude,
				  in float max_magnitude,
				  in CatalogSeq catalogs,
				  in ContributorSeq contributors,
				  in long seq_max,
				  out EventSeqIter iter
				  );

	  /** finds events whose name matches the given string. Event names are not 
	      required to be unique, and thus an array is returned. If no event in
	      the service matches the given name, then a zero length array should
	      be returned.
	  */ 
      EventAccessSeq get_by_name(
				 in string name
				 );

      /** returns a list of all catalogs known to this service.
      */
      CatalogSeq known_catalogs();

      /** returns a list of all know contributors of catalogs 
          to this service.
      */
      ContributorSeq known_contributors();

      /** returns a list of all catalogs that come from the given
          contributor. If no catalogs are known for this contributor
          then a zero length array should be returned.
      */
      CatalogSeq catalogs_from(in Contributor contrib);

    };

    //********************************************************************
    // EventFactory Interface
    //********************************************************************

    /**
     * The EventFactory interface provides operations to create events
     */
    interface EventFactory : EventMgr
    {
      Event create(
		   in EventAttr attributes,
		   in AuditInfoOpt audit_info
		   );

    };


    //********************************************************************
    // EventAccess Interface
    //********************************************************************

    /**
     * The EventAccess interface provides operations to access event
     * information.
     */
    interface EventAccess :
      AuditSystemAccess, EventMgr
    {
      readonly attribute Event a_writeable;

      /** Defines the ParameterMgr where parameters for this Event reside */
      readonly attribute IfParameterMgr::ParameterComponent parm_svc;

      EventAttr get_attributes();

      OriginSeq get_origins();

      Origin get_origin(
			in OriginId the_origin
			) raises (
				  OriginNotFound
				  );

      Origin get_preferred_origin(
    ) raises (
	      NoPreferredOrigin
	      );

      LocatorSeq get_locators(
			      in OriginId an_origin
			      ) raises (
					OriginNotFound,
					NotImplemented
					);

      AuditTrail get_audit_trail_for_origin(
					    in OriginId the_origin
					    ) raises (
						      OriginNotFound,
						      NotImplemented
						      );

    };



    //********************************************************************
    // Event Interface
    //********************************************************************

    /**
     * The Event interface defines a full access event. Allowing not
     * access to data but also update capabilities.
     */
    interface Event :
      EventAccess
    {
      void update_region(
			 in FlinnEngdahlRegion region,
			 in AuditInfoOpt audit_info
			 );

      void destroy();

      /** Add a origin to the event. If no origin exist the origin will
       * become the default until the default is reset by a add_origin
       * or set_preferred_origin.
       */
      OriginId add_origin(
			  in Time origin_time,
			  in Location the_location,
			  in MagnitudeSeq magnitudes,
			  in LocatorSeq locators,
			  in boolean preferred,
			  in Catalog the_catalog,
			  in Contributor the_contributor,
			  in AuditInfoOpt audit_info
			  );

      void add_locators(
			in OriginId the_origin,
			in LocatorSeq locators,
			in AuditInfoOpt audit_info
			) raises (
				  OriginNotFound
				  );

      void add_magnitude(
			 in OriginId the_origin,
			 in Magnitude a_magnitude,
			 in AuditInfoOpt audit_info
			 ) raises (
				   OriginNotFound
				   );

      void delete_origin(
			 in OriginId the_origin,
			 in AuditInfoOpt audit_info
			 ) raises (
				   OriginNotFound
				   );

      void set_preferred_origin(
				in OriginId the_origin,
				in AuditInfoOpt audit_info
				) raises (
					  OriginNotFound
					  );

    };

    // ***************************************************
    // *  PLEASE NOTE:                                   *
    // *  The words Event and Channel in the following   *
    // *  section are used for the standard OMG Event    *
    // *  service, which provides for notification that  *
    // *  something has happened. They are not related   *
    // *  to the seismological usage of Event or Channel.*
    // ***************************************************

    //??? Definition structure that is passed through event channel

    /** Event and Channel here refer to OMG standard event service,
     *  not the similarly named things in seismology. */
    interface EventChannelFinder {

      /** Event and Channel here refer to OMG standard event service,
       *  not the similarly named things in seismology. */
      EventChannelDefinitionSeq list_channels(
    );

      /** Event and Channel here refer to OMG standard event service,
       *  not the similarly named things in seismology. */
      CosEventChannelAdmin::ConsumerAdmin  retrieve_channel(
							    in EventChannelName id
							    ) raises (
								      NotFound
								      );

    };

    /** Event and Channel here refer to OMG standard event service,
     *  not the similarly named things in seismology. */
    interface EventChannelAdmin
    {
      /**Creates an EventService channel
       * Event and Channel here refer to OMG standard event service,
       *  not the similarly named things in seismology. */
      void create_channel(
			  in EventChannelName name,
			  in Area the_area,
			  in Length min_depth,
			  in Length max_depth,
			  in MagType search_types,
			  in float min_magnitude,
			  in float max_magnitude
			  );

      /** Event and Channel here refer to OMG standard event service,
       *  not the similarly named things in seismology. */
      void delete_channel(
			  in EventChannelName name
			  ) raises (
				    NotFound
				    );

    };

    };
  };

#endif //_IF_EVENT_IDL

