// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfRealTimeCollector;

//
// IDL:iris.edu/Fissures/IfRealTimeCollector/RealTimeCollector:1.0
//
public abstract class RealTimeCollectorPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               RealTimeCollectorOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:iris.edu/Fissures/IfRealTimeCollector/RealTimeCollector:1.0",
    };

    public RealTimeCollector
    _this()
    {
        return RealTimeCollectorHelper.narrow(super._this_object());
    }

    public RealTimeCollector
    _this(org.omg.CORBA.ORB orb)
    {
        return RealTimeCollectorHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "add_data",
            "configure",
            "destroy",
            "get_collector",
            "reset_sequence"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // add_data
            return _OB_op_add_data(in, handler);

        case 1: // configure
            return _OB_op_configure(in, handler);

        case 2: // destroy
            return _OB_op_destroy(in, handler);

        case 3: // get_collector
            return _OB_op_get_collector(in, handler);

        case 4: // reset_sequence
            return _OB_op_reset_sequence(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_add_data(org.omg.CORBA.portable.InputStream in,
                    org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            DataChunk[] _ob_a0 = DataChunkSeqHelper.read(in);
            add_data(_ob_a0);
            out = handler.createReply();
        }
        catch(UnknownChannels _ob_ex)
        {
            out = handler.createExceptionReply();
            UnknownChannelsHelper.write(out, _ob_ex);
        }
        catch(ChunkOutOfOrder _ob_ex)
        {
            out = handler.createExceptionReply();
            ChunkOutOfOrderHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_configure(org.omg.CORBA.portable.InputStream in,
                     org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        CollectorConfiguration[] _ob_a0 = CollectorConfigurationSeqHelper.read(in);
        configure(_ob_a0);
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_destroy(org.omg.CORBA.portable.InputStream in,
                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        destroy();
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_get_collector(org.omg.CORBA.portable.InputStream in,
                         org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            RealTimeCollector _ob_r = get_collector();
            out = handler.createReply();
            RealTimeCollectorHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.NotImplemented _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.NotImplementedHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_reset_sequence(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            edu.iris.Fissures.IfNetwork.ChannelId[] _ob_a0 = ChannelIdSeqHelper.read(in);
            int[] _ob_a1 = LongSeqHelper.read(in);
            reset_sequence(_ob_a0, _ob_a1);
            out = handler.createReply();
        }
        catch(UnknownChannels _ob_ex)
        {
            out = handler.createExceptionReply();
            UnknownChannelsHelper.write(out, _ob_ex);
        }
        return out;
    }
}
