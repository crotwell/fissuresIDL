// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfNetwork;

import java.lang.ref.WeakReference;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import edu.iris.Fissures.Time;
import edu.iris.Fissures.TimeRange;

//
// IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0
//
/** The attributes of a seismic network. This object exists because
 *  the network object is an remote CORBA object. */

public abstract class NetworkAttr implements org.omg.CORBA.portable.StreamableValue
{
    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/id:1.0
    //
    /** Identifies a network uniquely. */

    protected NetworkId id;

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/name:1.0
    //
    /** A name for this network. The form of this is not specified, 
     *  but it should be suitable for display to a person. It is not 
     *  nescessarily unique. */

    private String name;

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/description:1.0
    //
    /**A description of the network. The form of this is not specified, but
     *should be suitable for display to a person.
     **/

    private String description;

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/owner:1.0
    //
    /** The owner or owning agency of the network. */

    private String owner;

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/effective_time:1.0
    //
    /** The effective time range of the network. The begin should be at or 
     *  before any station within the network records data. If the network
     * is still operating at the present time, then the end should be set
     * to TIME_UNKNOWN as defined in IfConstants.idl.
     **/

    private edu.iris.Fissures.TimeRange effective_time;

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/get_id:1.0
    //
    /** returns the NetworkId. This is just to access the private id 
     *attribute. */

    public abstract NetworkId
    get_id();

    //
    // IDL:iris.edu/Fissures/IfNetwork/NetworkAttr/get_code:1.0
    //
    /** Returns the network code portion of the network id. This is 
     *  equivalent to net_id().network_code.
     **/

    public abstract String
    get_code();

    private static String[] _OB_truncatableIds_ =
    {
        NetworkAttrHelper.id()
    };

    public String[]
    _truncatable_ids()
    {
        return _OB_truncatableIds_;
    }

    public void
    _read(org.omg.CORBA.portable.InputStream in)
    {
        id = NetworkIdHelper.read(in);
        setName(in.read_string());
        setDescription(in.read_string());
        setOwner(in.read_string());
        setEffectiveTime(edu.iris.Fissures.TimeRangeHelper.read(in));
    }

    public void
    _write(org.omg.CORBA.portable.OutputStream out)
    {
        NetworkIdHelper.write(out, id);
        out.write_string(getName());
        out.write_string(getDescription());
        out.write_string(getOwner());
        edu.iris.Fissures.TimeRangeHelper.write(out, getEffectiveTime());
    }

    public org.omg.CORBA.TypeCode
    _type()
    {
        return NetworkAttrHelper.type();
    }
    
    // added manually

    public String getName() {
        return name;
    }

    public TimeRange getEffectiveTime() {
        return effective_time;
    }

    public String getOwner() {
        return owner;
    }

    public String getDescription() {
        return description;
    }

    // hibernate
    protected NetworkId getId() {
        return get_id();
    }

    protected void setId(NetworkId netId) {
        this.id = netId;
        setBeginTime(netId.begin_time);
    }

    protected void setName(String name) {
        this.name = name;
    }


    protected void setOwner(String owner) {
        this.owner = owner;
    }

    protected void setDescription(String description) {
        this.description = description;
    }

    protected Time getBeginTime() {
        return get_id().begin_time;
    }
    
    protected void setBeginTime(Time beginTime) {
        if (getEffectiveTime() == null) {
            setEffectiveTime(new TimeRange());
        }
        this.getEffectiveTime().start_time = beginTime;
        get_id().begin_time = beginTime;
    }
    
    protected Time getEndTime() {
        return getEffectiveTime().end_time;
    }
    
    protected void setEndTime(Time endTime) {
        if (getEffectiveTime() == null) {
            setEffectiveTime(new TimeRange());
        }
        this.getEffectiveTime().end_time = endTime;
        this.getEffectiveTime().start_time = get_id().begin_time;
    }
    
    public static NetworkAttr intern(NetworkAttr attr) {
        synchronized(knownTimes) {
            String key = attr.getId().network_code+attr.getId().begin_time.date_time;
            NetworkAttr interned = null;
            if (knownNetworks.containsKey(key)) {
                // don't return here, still need to check for null due to weak reference
                interned = knownNetworks.get(key).get();
            }
            if(interned == null) {
                knownNetworks.put(key, new WeakReference<NetworkAttr>(attr));
                attr.setDescription(attr.getDescription().intern());
                attr.setName(attr.getName().intern());
                attr.setOwner(attr.getOwner().intern());
                intern(attr.get_id());
                return attr;
            }
            return interned;
        }
    }

    public static void intern(NetworkId id) {
        id.begin_time = intern(id.begin_time);
        id.network_code = id.network_code.intern();
    }
    
    public static TimeRange intern(TimeRange effective_time) {
        effective_time.end_time = intern(effective_time.end_time);
        effective_time.start_time = intern(effective_time.start_time);
        return effective_time;
    }

    public static Time intern(Time unknownTime) {
        synchronized(knownTimes) {
            String key = unknownTime.date_time;
            Time interned = null;
            if (knownTimes.containsKey(key)) {
                interned = knownTimes.get(key).get();
            }
            if(interned == null) {
                knownTimes.put(key, new WeakReference<Time>(unknownTime));
                return unknownTime;
            }
            return interned;
        }
    }

    protected void setEffectiveTime(edu.iris.Fissures.TimeRange effective_time) {
        this.effective_time = effective_time;
    }

    private static Map<String, WeakReference<Time>> knownTimes = Collections.synchronizedMap(new HashMap<String, WeakReference<Time>>());
    
    private static Map<String, WeakReference<NetworkAttr>> knownNetworks = Collections.synchronizedMap(new HashMap<String, WeakReference<NetworkAttr>>());

}
