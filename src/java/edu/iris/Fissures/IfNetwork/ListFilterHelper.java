// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfNetwork;

//
// IDL:iris.edu/Fissures/IfNetwork/ListFilter:1.0
//
final public class ListFilterHelper
{
    public static void
    insert(org.omg.CORBA.Any any, ListFilter val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static ListFilter
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            org.omg.CORBA.StructMember[] members = new org.omg.CORBA.StructMember[7];

            members[0] = new org.omg.CORBA.StructMember();
            members[0].name = "frequency";
            members[0].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));

            members[1] = new org.omg.CORBA.StructMember();
            members[1].name = "frequency_unit";
            members[1].type = edu.iris.Fissures.UnitHelper.type();

            members[2] = new org.omg.CORBA.StructMember();
            members[2].name = "amplitude";
            members[2].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));

            members[3] = new org.omg.CORBA.StructMember();
            members[3].name = "amplitude_error";
            members[3].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));

            members[4] = new org.omg.CORBA.StructMember();
            members[4].name = "phase";
            members[4].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));

            members[5] = new org.omg.CORBA.StructMember();
            members[5].name = "phase_unit";
            members[5].type = edu.iris.Fissures.UnitHelper.type();

            members[6] = new org.omg.CORBA.StructMember();
            members[6].name = "phase_error";
            members[6].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));

            typeCode_ = orb.create_struct_tc(id(), "ListFilter", members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:iris.edu/Fissures/IfNetwork/ListFilter:1.0";
    }

    public static ListFilter
    read(org.omg.CORBA.portable.InputStream in)
    {
        ListFilter _ob_v = new ListFilter();
        int len0 = in.read_ulong();
        _ob_v.frequency = new float[len0];
        in.read_float_array(_ob_v.frequency, 0, len0);
        _ob_v.frequency_unit = edu.iris.Fissures.UnitHelper.read(in);
        int len1 = in.read_ulong();
        _ob_v.amplitude = new float[len1];
        in.read_float_array(_ob_v.amplitude, 0, len1);
        int len2 = in.read_ulong();
        _ob_v.amplitude_error = new float[len2];
        in.read_float_array(_ob_v.amplitude_error, 0, len2);
        int len3 = in.read_ulong();
        _ob_v.phase = new float[len3];
        in.read_float_array(_ob_v.phase, 0, len3);
        _ob_v.phase_unit = edu.iris.Fissures.UnitHelper.read(in);
        int len4 = in.read_ulong();
        _ob_v.phase_error = new float[len4];
        in.read_float_array(_ob_v.phase_error, 0, len4);
        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, ListFilter val)
    {
        int len0 = val.frequency.length;
        out.write_ulong(len0);
        out.write_float_array(val.frequency, 0, len0);
        edu.iris.Fissures.UnitHelper.write(out, val.frequency_unit);
        int len1 = val.amplitude.length;
        out.write_ulong(len1);
        out.write_float_array(val.amplitude, 0, len1);
        int len2 = val.amplitude_error.length;
        out.write_ulong(len2);
        out.write_float_array(val.amplitude_error, 0, len2);
        int len3 = val.phase.length;
        out.write_ulong(len3);
        out.write_float_array(val.phase, 0, len3);
        edu.iris.Fissures.UnitHelper.write(out, val.phase_unit);
        int len4 = val.phase_error.length;
        out.write_ulong(len4);
        out.write_float_array(val.phase_error, 0, len4);
    }
}
