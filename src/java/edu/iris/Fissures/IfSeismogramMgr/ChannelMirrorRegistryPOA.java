// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfSeismogramMgr;

//
// IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorRegistry:1.0
//
public abstract class ChannelMirrorRegistryPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               ChannelMirrorRegistryOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorRegistry:1.0",
    };

    public ChannelMirrorRegistry
    _this()
    {
        return ChannelMirrorRegistryHelper.narrow(super._this_object());
    }

    public ChannelMirrorRegistry
    _this(org.omg.CORBA.ORB orb)
    {
        return ChannelMirrorRegistryHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "get_mirrorable_channels",
            "register",
            "unregister"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // get_mirrorable_channels
            return _OB_op_get_mirrorable_channels(in, handler);

        case 1: // register
            return _OB_op_register(in, handler);

        case 2: // unregister
            return _OB_op_unregister(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_get_mirrorable_channels(org.omg.CORBA.portable.InputStream in,
                                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        edu.iris.Fissures.IfNetwork.ChannelId[] _ob_r = get_mirrorable_channels();
        out = handler.createReply();
        ChannelIdSeqHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_register(org.omg.CORBA.portable.InputStream in,
                    org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            MirrorFactory _ob_a0 = MirrorFactoryHelper.read(in);
            edu.iris.Fissures.IfNetwork.ChannelId[] _ob_a1 = ChannelIdSeqHelper.read(in);
            String _ob_r = register(_ob_a0, _ob_a1);
            out = handler.createReply();
            MirrorIdHelper.write(out, _ob_r);
        }
        catch(UnknownChannel _ob_ex)
        {
            out = handler.createExceptionReply();
            UnknownChannelHelper.write(out, _ob_ex);
        }
        catch(NotMirroring _ob_ex)
        {
            out = handler.createExceptionReply();
            NotMirroringHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_unregister(org.omg.CORBA.portable.InputStream in,
                      org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            String _ob_a0 = MirrorIdHelper.read(in);
            unregister(_ob_a0);
            out = handler.createReply();
        }
        catch(UnknownMirrorId _ob_ex)
        {
            out = handler.createExceptionReply();
            UnknownMirrorIdHelper.write(out, _ob_ex);
        }
        return out;
    }
}
