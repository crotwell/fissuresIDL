// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfTimeSeries;

//
// IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0
//
final public class TimeSeriesDataSelHelper
{
    public static void
    insert(org.omg.CORBA.Any any, TimeSeriesDataSel val)
    {
        org.omg.CORBA.portable.OutputStream out = any.create_output_stream();
        write(out, val);
        any.read_value(out.create_input_stream(), type());
    }

    public static TimeSeriesDataSel
    extract(org.omg.CORBA.Any any)
    {
        if(any.type().equivalent(type()))
            return read(any.create_input_stream());
        else
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    private static org.omg.CORBA.TypeCode typeCode_;

    public static org.omg.CORBA.TypeCode
    type()
    {
        if(typeCode_ == null)
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init();
            org.omg.CORBA.UnionMember[] members = new org.omg.CORBA.UnionMember[5];

            members[0] = new org.omg.CORBA.UnionMember();
            members[0].name = "sht_values";
            members[0].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_short));
            members[0].label = orb.create_any();
            TimeSeriesTypeHelper.insert(members[0].label, TimeSeriesType.from_int(0));

            members[1] = new org.omg.CORBA.UnionMember();
            members[1].name = "int_values";
            members[1].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_long));
            members[1].label = orb.create_any();
            TimeSeriesTypeHelper.insert(members[1].label, TimeSeriesType.from_int(1));

            members[2] = new org.omg.CORBA.UnionMember();
            members[2].name = "flt_values";
            members[2].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_float));
            members[2].label = orb.create_any();
            TimeSeriesTypeHelper.insert(members[2].label, TimeSeriesType.from_int(2));

            members[3] = new org.omg.CORBA.UnionMember();
            members[3].name = "dbl_values";
            members[3].type = orb.create_sequence_tc(0, orb.get_primitive_tc(org.omg.CORBA.TCKind.tk_double));
            members[3].label = orb.create_any();
            TimeSeriesTypeHelper.insert(members[3].label, TimeSeriesType.from_int(3));

            members[4] = new org.omg.CORBA.UnionMember();
            members[4].name = "encoded_values";
            members[4].type = orb.create_sequence_tc(0, EncodedDataHelper.type());
            members[4].label = orb.create_any();
            TimeSeriesTypeHelper.insert(members[4].label, TimeSeriesType.from_int(4));

            org.omg.CORBA.TypeCode discType = TimeSeriesTypeHelper.type();
            typeCode_ = orb.create_union_tc(id(), "TimeSeriesDataSel", discType, members);
        }

        return typeCode_;
    }

    public static String
    id()
    {
        return "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0";
    }

    public static TimeSeriesDataSel
    read(org.omg.CORBA.portable.InputStream in)
    {
        TimeSeriesDataSel _ob_v = new TimeSeriesDataSel();
        TimeSeriesType _ob_d;
        _ob_d = TimeSeriesTypeHelper.read(in);

        switch(_ob_d.value())
        {
        case TimeSeriesType._TYPE_SHORT:
        {
            short[] _ob_m;
            int len0 = in.read_ulong();
            _ob_m = new short[len0];
            in.read_short_array(_ob_m, 0, len0);
            _ob_v.sht_values(_ob_m);
            break;
        }

        case TimeSeriesType._TYPE_LONG:
        {
            int[] _ob_m;
            int len1 = in.read_ulong();
            _ob_m = new int[len1];
            in.read_long_array(_ob_m, 0, len1);
            _ob_v.int_values(_ob_m);
            break;
        }

        case TimeSeriesType._TYPE_FLOAT:
        {
            float[] _ob_m;
            int len2 = in.read_ulong();
            _ob_m = new float[len2];
            in.read_float_array(_ob_m, 0, len2);
            _ob_v.flt_values(_ob_m);
            break;
        }

        case TimeSeriesType._TYPE_DOUBLE:
        {
            double[] _ob_m;
            int len3 = in.read_ulong();
            _ob_m = new double[len3];
            in.read_double_array(_ob_m, 0, len3);
            _ob_v.dbl_values(_ob_m);
            break;
        }

        case TimeSeriesType._TYPE_ENCODED:
        {
            EncodedData[] _ob_m;
            int len4 = in.read_ulong();
            _ob_m = new EncodedData[len4];
            for(int i4 = 0 ; i4 < len4 ; i4++)
                _ob_m[i4] = EncodedDataHelper.read(in);
            _ob_v.encoded_values(_ob_m);
            break;
        }
        }

        return _ob_v;
    }

    public static void
    write(org.omg.CORBA.portable.OutputStream out, TimeSeriesDataSel val)
    {
        TimeSeriesType _ob_d = val.discriminator();
        TimeSeriesTypeHelper.write(out, _ob_d);

        switch(_ob_d.value())
        {
        case TimeSeriesType._TYPE_SHORT:
        {
            short[] _ob_m = val.sht_values();
            int len0 = _ob_m.length;
            out.write_ulong(len0);
            out.write_short_array(_ob_m, 0, len0);
            break;
        }

        case TimeSeriesType._TYPE_LONG:
        {
            int[] _ob_m = val.int_values();
            int len1 = _ob_m.length;
            out.write_ulong(len1);
            out.write_long_array(_ob_m, 0, len1);
            break;
        }

        case TimeSeriesType._TYPE_FLOAT:
        {
            float[] _ob_m = val.flt_values();
            int len2 = _ob_m.length;
            out.write_ulong(len2);
            out.write_float_array(_ob_m, 0, len2);
            break;
        }

        case TimeSeriesType._TYPE_DOUBLE:
        {
            double[] _ob_m = val.dbl_values();
            int len3 = _ob_m.length;
            out.write_ulong(len3);
            out.write_double_array(_ob_m, 0, len3);
            break;
        }

        case TimeSeriesType._TYPE_ENCODED:
        {
            EncodedData[] _ob_m = val.encoded_values();
            int len4 = _ob_m.length;
            out.write_ulong(len4);
            for(int i4 = 0 ; i4 < len4 ; i4++)
                EncodedDataHelper.write(out, _ob_m[i4]);
            break;
        }
        }
    }
}
