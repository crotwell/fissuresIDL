// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfSeismogramDC;

//
// IDL:iris.edu/Fissures/IfSeismogramDC/GroupingDataCenter:1.0
//
public abstract class GroupingDataCenterPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               GroupingDataCenterOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:iris.edu/Fissures/IfSeismogramDC/GroupingDataCenter:1.0",
        "IDL:iris.edu/Fissures/IfSeismogramDC/DataCenter:1.0"
    };

    public GroupingDataCenter
    _this()
    {
        return GroupingDataCenterHelper.narrow(super._this_object());
    }

    public GroupingDataCenter
    _this(org.omg.CORBA.ORB orb)
    {
        return GroupingDataCenterHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "available_data",
            "cancel_request",
            "queue_groups",
            "queue_seismograms",
            "request_groups",
            "request_seismograms",
            "request_status",
            "retrieve_group_queue",
            "retrieve_groups",
            "retrieve_queue",
            "retrieve_seismograms"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // available_data
            return _OB_op_available_data(in, handler);

        case 1: // cancel_request
            return _OB_op_cancel_request(in, handler);

        case 2: // queue_groups
            return _OB_op_queue_groups(in, handler);

        case 3: // queue_seismograms
            return _OB_op_queue_seismograms(in, handler);

        case 4: // request_groups
            return _OB_op_request_groups(in, handler);

        case 5: // request_seismograms
            return _OB_op_request_seismograms(in, handler);

        case 6: // request_status
            return _OB_op_request_status(in, handler);

        case 7: // retrieve_group_queue
            return _OB_op_retrieve_group_queue(in, handler);

        case 8: // retrieve_groups
            return _OB_op_retrieve_groups(in, handler);

        case 9: // retrieve_queue
            return _OB_op_retrieve_queue(in, handler);

        case 10: // retrieve_seismograms
            return _OB_op_retrieve_seismograms(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_available_data(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        RequestFilter[] _ob_a0 = RequestFilterSeqHelper.read(in);
        RequestFilter[] _ob_r = available_data(_ob_a0);
        out = handler.createReply();
        RequestFilterSeqHelper.write(out, _ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_cancel_request(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            String _ob_a0 = ServerRequestIdHelper.read(in);
            cancel_request(_ob_a0);
            out = handler.createReply();
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_queue_groups(org.omg.CORBA.portable.InputStream in,
                        org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            GroupRequest[] _ob_a0 = GroupRequestSeqHelper.read(in);
            String _ob_r = queue_groups(_ob_a0);
            out = handler.createReply();
            ServerRequestIdHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_queue_seismograms(org.omg.CORBA.portable.InputStream in,
                             org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            RequestFilter[] _ob_a0 = RequestFilterSeqHelper.read(in);
            String _ob_r = queue_seismograms(_ob_a0);
            out = handler.createReply();
            ServerRequestIdHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_request_groups(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            GroupRequest[] _ob_a0 = GroupRequestSeqHelper.read(in);
            DataCenterCallBack _ob_a1 = DataCenterCallBackHelper.read(in);
            String _ob_r = request_groups(_ob_a0, _ob_a1);
            out = handler.createReply();
            ServerRequestIdHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_request_seismograms(org.omg.CORBA.portable.InputStream in,
                               org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            RequestFilter[] _ob_a0 = RequestFilterSeqHelper.read(in);
            DataCenterCallBack _ob_a1 = DataCenterCallBackHelper.read(in);
            boolean _ob_a2 = in.read_boolean();
            edu.iris.Fissures.Time _ob_a3 = edu.iris.Fissures.TimeHelper.read(in);
            String _ob_r = request_seismograms(_ob_a0, _ob_a1, _ob_a2, _ob_a3);
            out = handler.createReply();
            ServerRequestIdHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_request_status(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            String _ob_a0 = ServerRequestIdHelper.read(in);
            String _ob_r = request_status(_ob_a0);
            out = handler.createReply();
            RequestStatusHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_group_queue(org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            String _ob_a0 = ServerRequestIdHelper.read(in);
            LocalMotionVector[] _ob_r = retrieve_group_queue(_ob_a0);
            out = handler.createReply();
            LocalMotionVectorSeqHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_groups(org.omg.CORBA.portable.InputStream in,
                           org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            GroupRequest[] _ob_a0 = GroupRequestSeqHelper.read(in);
            LocalMotionVector[] _ob_r = retrieve_groups(_ob_a0);
            out = handler.createReply();
            LocalMotionVectorSeqHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_queue(org.omg.CORBA.portable.InputStream in,
                          org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            String _ob_a0 = ServerRequestIdHelper.read(in);
            LocalSeismogram[] _ob_r = retrieve_queue(_ob_a0);
            out = handler.createReply();
            LocalSeismogramSeqHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_seismograms(org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            RequestFilter[] _ob_a0 = RequestFilterSeqHelper.read(in);
            LocalSeismogram[] _ob_r = retrieve_seismograms(_ob_a0);
            out = handler.createReply();
            LocalSeismogramSeqHelper.write(out, _ob_r);
        }
        catch(edu.iris.Fissures.FissuresException _ob_ex)
        {
            out = handler.createExceptionReply();
            edu.iris.Fissures.FissuresExceptionHelper.write(out, _ob_ex);
        }
        return out;
    }
}
