// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.iris.Fissures.IfNetwork;

//
// IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0
//
public abstract class NetworkExplorerPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               NetworkExplorerOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0",
    };

    public NetworkExplorer
    _this()
    {
        return NetworkExplorerHelper.narrow(super._this_object());
    }

    public NetworkExplorer
    _this(org.omg.CORBA.ORB orb)
    {
        return NetworkExplorerHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "locate_all",
            "locate_by_sampling",
            "locate_channels",
            "retrieve_channel",
            "retrieve_grouping"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // locate_all
            return _OB_op_locate_all(in, handler);

        case 1: // locate_by_sampling
            return _OB_op_locate_by_sampling(in, handler);

        case 2: // locate_channels
            return _OB_op_locate_channels(in, handler);

        case 3: // retrieve_channel
            return _OB_op_retrieve_channel(in, handler);

        case 4: // retrieve_grouping
            return _OB_op_retrieve_grouping(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_locate_all(org.omg.CORBA.portable.InputStream in,
                      org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        edu.iris.Fissures.Area _ob_a0 = edu.iris.Fissures.AreaHelper.read(in);
        int _ob_a1 = in.read_long();
        ChannelGroupIterHolder _ob_ah2 = new ChannelGroupIterHolder();
        ChannelId[][] _ob_r = locate_all(_ob_a0, _ob_a1, _ob_ah2);
        out = handler.createReply();
        ChannelGroupSeqHelper.write(out, _ob_r);
        ChannelGroupIterHelper.write(out, _ob_ah2.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_locate_by_sampling(org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        edu.iris.Fissures.Area _ob_a0 = edu.iris.Fissures.AreaHelper.read(in);
        SamplingRange _ob_a1 = SamplingRangeHelper.read(in);
        int _ob_a2 = in.read_long();
        ChannelGroupIterHolder _ob_ah3 = new ChannelGroupIterHolder();
        ChannelId[][] _ob_r = locate_by_sampling(_ob_a0, _ob_a1, _ob_a2, _ob_ah3);
        out = handler.createReply();
        ChannelGroupSeqHelper.write(out, _ob_r);
        ChannelGroupIterHelper.write(out, _ob_ah3.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_locate_channels(org.omg.CORBA.portable.InputStream in,
                           org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        edu.iris.Fissures.Area _ob_a0 = edu.iris.Fissures.AreaHelper.read(in);
        SamplingRange _ob_a1 = SamplingRangeHelper.read(in);
        OrientationRange _ob_a2 = OrientationRangeHelper.read(in);
        int _ob_a3 = in.read_long();
        ChannelIdIterHolder _ob_ah4 = new ChannelIdIterHolder();
        ChannelId[] _ob_r = locate_channels(_ob_a0, _ob_a1, _ob_a2, _ob_a3, _ob_ah4);
        out = handler.createReply();
        ChannelIdSeqHelper.write(out, _ob_r);
        ChannelIdIterHelper.write(out, _ob_ah4.value);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_channel(org.omg.CORBA.portable.InputStream in,
                            org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            ChannelId _ob_a0 = ChannelIdHelper.read(in);
            Channel _ob_r = retrieve_channel(_ob_a0);
            out = handler.createReply();
            ChannelHelper.write(out, _ob_r);
        }
        catch(ChannelNotFound _ob_ex)
        {
            out = handler.createExceptionReply();
            ChannelNotFoundHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_retrieve_grouping(org.omg.CORBA.portable.InputStream in,
                             org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            ChannelId _ob_a0 = ChannelIdHelper.read(in);
            ChannelId[] _ob_r = retrieve_grouping(_ob_a0);
            out = handler.createReply();
            ChannelGroupHelper.write(out, _ob_r);
        }
        catch(ChannelNotFound _ob_ex)
        {
            out = handler.createExceptionReply();
            ChannelNotFoundHelper.write(out, _ob_ex);
        }
        return out;
    }
}
